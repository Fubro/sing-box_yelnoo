# ## file: .github/workflows/build-android-core.yml

# 工作流名称
name: Build Android Core Binary

# 触发工作流的事件
on:
  # 1. 允许在 GitHub 页面上手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Version Name (e.g., 1.9.0-beta.11)'
        required: true
        type: string
  
  # 2. 当代码推送到 main 或 dev 分支时自动触发
  push:
    branches:
      - main
      - dev

# 并发控制：确保同一分支的构建任务只有一个在运行，新的 push 会取消旧的
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 定义工作任务
jobs:
  # 第一个任务：计算版本号
  calculate_version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputs.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'

      - name: Use manual version if triggered manually
        if: github.event_name == 'workflow_dispatch'
        run: echo "version=${{ inputs.version }}" >> "$GITHUB_ENV"

      - name: Calculate version from git tag
        if: github.event_name != 'workflow_dispatch'
        run: go run -v ./cmd/internal/read_tag --ci

      - name: Set version as an output
        id: outputs
        run: echo "version=${{ env.version }}" >> "$GITHUB_OUTPUT"

  # 第二个任务：构建 Android 二进制文件
  build_android_binary:
    name: Build Android Binary
    # 需要等待 calculate_version 任务成功完成
    needs: [calculate_version]
    runs-on: ubuntu-latest
    
    # 构建策略：为不同的 Android 架构创建并行的构建任务
    strategy:
      fail-fast: false # 一个架构失败了，不取消其他架构的构建
      matrix:
        include:
          - { arch: arm64,  ndk: "aarch64-linux-android21" }
          - { arch: arm,    ndk: "armv7a-linux-androideabi21" }
          - { arch: amd64,  ndk: "x86_64-linux-android21" }
          - { arch: "386",  ndk: "i686-linux-android21" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28
          # 已移除 local-cache: true 选项，避免因 GitHub 缓存服务不稳定导致构建失败

      - name: Set build tags
        run: |
          TAGS='with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_reality_server,with_acme,with_clash_api,with_ech'
          echo "BUILD_TAGS=${TAGS}" >> "${GITHUB_ENV}"

      - name: Build Android Binary
        run: |
          set -e # 如果任何命令失败，立即退出
          # 安装内部构建工具
          go install -v ./cmd/internal/build
          
          # 设置 C 和 C++ 编译器为 NDK 中的 Clang
          export CC='${{ matrix.ndk }}-clang'
          export CXX="${CC}++"
          
          # 创建输出目录
          mkdir -p dist
          
          # 执行构建命令
          GOOS=android GOARCH=${{ matrix.arch }} build go build -v -trimpath -o dist/sing-box -tags "${BUILD_TAGS}" \
          -ldflags '-s -w -buildid= -X github.com/sagernet/sing-box/constant.Version=${{ needs.calculate_version.outputs.version }}' \
          ./cmd/sing-box
        env:
          CGO_ENABLED: "1" # Android 构建需要开启 CGO
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare archive file
        run: |
          set -e
          # 定义压缩包和文件夹的名称
          DIR_NAME="sing-box-${{ needs.calculate_version.outputs.version }}-android-${{ matrix.arch }}"
          
          # 进入输出目录
          cd dist
          
          # 创建临时文件夹并拷贝文件
          mkdir -p "${DIR_NAME}"
          cp ../LICENSE "${DIR_NAME}"
          mv sing-box "${DIR_NAME}"
          
          # 打包成 .tar.gz 格式
          tar -czvf "${DIR_NAME}.tar.gz" "${DIR_NAME}"
          
          # 清理临时文件夹
          rm -r "${DIR_NAME}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # 上传产物的名称，例如：binary-android_arm64
          name: binary-android_${{ matrix.arch }}
          # 上传的路径
          path: dist/*.tar.gz
